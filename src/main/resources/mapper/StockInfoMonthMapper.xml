<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wdke.stock.storage.dao.StockInfoMonthMapper">
  <resultMap id="BaseResultMap" type="com.wdke.stock.storage.entity.StockInfoMonth">
    <id column="stock_code" jdbcType="VARCHAR" property="stockCode" />
    <id column="stock_type" jdbcType="INTEGER" property="stockType" />
    <id column="year" jdbcType="INTEGER" property="year" />
    <id column="month" jdbcType="INTEGER" property="month" />
    <result column="stock_name" jdbcType="VARCHAR" property="stockName" />
    <result column="open" jdbcType="REAL" property="open" />
    <result column="high" jdbcType="REAL" property="high" />
    <result column="hign_time" jdbcType="INTEGER" property="hignTime" />
    <result column="low" jdbcType="REAL" property="low" />
    <result column="low_time" jdbcType="INTEGER" property="lowTime" />
    <result column="close" jdbcType="REAL" property="close" />
    <result column="yest_close" jdbcType="REAL" property="yestClose" />
    <result column="differences" jdbcType="REAL" property="differences" />
    <result column="volume" jdbcType="BIGINT" property="volume" />
    <result column="buy_time" jdbcType="INTEGER" property="buyTime" />
    <result column="sell_time" jdbcType="INTEGER" property="sellTime" />
    <result column="buy_money" jdbcType="REAL" property="buyMoney" />
    <result column="buy_money_rate" jdbcType="REAL" property="buyMoneyRate" />
    <result column="fail_time" jdbcType="INTEGER" property="failTime" />
    <result column="fail_end_time" jdbcType="INTEGER" property="failEndTime" />
    <result column="fail_money" jdbcType="REAL" property="failMoney" />
    <result column="fail_money_rate" jdbcType="REAL" property="failMoneyRate" />
    <result column="net_profit" jdbcType="REAL" property="netProfit" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    stock_code, stock_type, year, month, stock_name, open, high, hign_time, low, low_time, 
    close, yest_close, differences, volume, buy_time, sell_time, buy_money, buy_money_rate, 
    fail_time, fail_end_time, fail_money, fail_money_rate, net_profit, create_date, update_date
  </sql>
  <select id="selectByExample" parameterType="com.wdke.stock.storage.entity.StockInfoMonthExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stock_info_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="offset != null and limit != null">
      limit ${offset}, ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.wdke.stock.storage.entity.StockInfoMonthKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from stock_info_month
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_type = #{stockType,jdbcType=INTEGER}
      and year = #{year,jdbcType=INTEGER}
      and month = #{month,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.wdke.stock.storage.entity.StockInfoMonthKey">
    delete from stock_info_month
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_type = #{stockType,jdbcType=INTEGER}
      and year = #{year,jdbcType=INTEGER}
      and month = #{month,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.wdke.stock.storage.entity.StockInfoMonthExample">
    delete from stock_info_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wdke.stock.storage.entity.StockInfoMonth">
    insert into stock_info_month (stock_code, stock_type, year, 
      month, stock_name, open, 
      high, hign_time, low, low_time, 
      close, yest_close, differences, 
      volume, buy_time, sell_time, 
      buy_money, buy_money_rate, fail_time, 
      fail_end_time, fail_money, fail_money_rate, 
      net_profit, create_date, update_date
      )
    values (#{stockCode,jdbcType=VARCHAR}, #{stockType,jdbcType=INTEGER}, #{year,jdbcType=INTEGER}, 
      #{month,jdbcType=INTEGER}, #{stockName,jdbcType=VARCHAR}, #{open,jdbcType=REAL}, 
      #{high,jdbcType=REAL}, #{hignTime,jdbcType=INTEGER}, #{low,jdbcType=REAL}, #{lowTime,jdbcType=INTEGER}, 
      #{close,jdbcType=REAL}, #{yestClose,jdbcType=REAL}, #{differences,jdbcType=REAL}, 
      #{volume,jdbcType=BIGINT}, #{buyTime,jdbcType=INTEGER}, #{sellTime,jdbcType=INTEGER}, 
      #{buyMoney,jdbcType=REAL}, #{buyMoneyRate,jdbcType=REAL}, #{failTime,jdbcType=INTEGER}, 
      #{failEndTime,jdbcType=INTEGER}, #{failMoney,jdbcType=REAL}, #{failMoneyRate,jdbcType=REAL}, 
      #{netProfit,jdbcType=REAL}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.wdke.stock.storage.entity.StockInfoMonth">
    insert into stock_info_month
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stockCode != null">
        stock_code,
      </if>
      <if test="stockType != null">
        stock_type,
      </if>
      <if test="year != null">
        year,
      </if>
      <if test="month != null">
        month,
      </if>
      <if test="stockName != null">
        stock_name,
      </if>
      <if test="open != null">
        open,
      </if>
      <if test="high != null">
        high,
      </if>
      <if test="hignTime != null">
        hign_time,
      </if>
      <if test="low != null">
        low,
      </if>
      <if test="lowTime != null">
        low_time,
      </if>
      <if test="close != null">
        close,
      </if>
      <if test="yestClose != null">
        yest_close,
      </if>
      <if test="differences != null">
        differences,
      </if>
      <if test="volume != null">
        volume,
      </if>
      <if test="buyTime != null">
        buy_time,
      </if>
      <if test="sellTime != null">
        sell_time,
      </if>
      <if test="buyMoney != null">
        buy_money,
      </if>
      <if test="buyMoneyRate != null">
        buy_money_rate,
      </if>
      <if test="failTime != null">
        fail_time,
      </if>
      <if test="failEndTime != null">
        fail_end_time,
      </if>
      <if test="failMoney != null">
        fail_money,
      </if>
      <if test="failMoneyRate != null">
        fail_money_rate,
      </if>
      <if test="netProfit != null">
        net_profit,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stockCode != null">
        #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="stockType != null">
        #{stockType,jdbcType=INTEGER},
      </if>
      <if test="year != null">
        #{year,jdbcType=INTEGER},
      </if>
      <if test="month != null">
        #{month,jdbcType=INTEGER},
      </if>
      <if test="stockName != null">
        #{stockName,jdbcType=VARCHAR},
      </if>
      <if test="open != null">
        #{open,jdbcType=REAL},
      </if>
      <if test="high != null">
        #{high,jdbcType=REAL},
      </if>
      <if test="hignTime != null">
        #{hignTime,jdbcType=INTEGER},
      </if>
      <if test="low != null">
        #{low,jdbcType=REAL},
      </if>
      <if test="lowTime != null">
        #{lowTime,jdbcType=INTEGER},
      </if>
      <if test="close != null">
        #{close,jdbcType=REAL},
      </if>
      <if test="yestClose != null">
        #{yestClose,jdbcType=REAL},
      </if>
      <if test="differences != null">
        #{differences,jdbcType=REAL},
      </if>
      <if test="volume != null">
        #{volume,jdbcType=BIGINT},
      </if>
      <if test="buyTime != null">
        #{buyTime,jdbcType=INTEGER},
      </if>
      <if test="sellTime != null">
        #{sellTime,jdbcType=INTEGER},
      </if>
      <if test="buyMoney != null">
        #{buyMoney,jdbcType=REAL},
      </if>
      <if test="buyMoneyRate != null">
        #{buyMoneyRate,jdbcType=REAL},
      </if>
      <if test="failTime != null">
        #{failTime,jdbcType=INTEGER},
      </if>
      <if test="failEndTime != null">
        #{failEndTime,jdbcType=INTEGER},
      </if>
      <if test="failMoney != null">
        #{failMoney,jdbcType=REAL},
      </if>
      <if test="failMoneyRate != null">
        #{failMoneyRate,jdbcType=REAL},
      </if>
      <if test="netProfit != null">
        #{netProfit,jdbcType=REAL},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wdke.stock.storage.entity.StockInfoMonthExample" resultType="java.lang.Long">
    select count(*) from stock_info_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update stock_info_month
    <set>
      <if test="record.stockCode != null">
        stock_code = #{record.stockCode,jdbcType=VARCHAR},
      </if>
      <if test="record.stockType != null">
        stock_type = #{record.stockType,jdbcType=INTEGER},
      </if>
      <if test="record.year != null">
        year = #{record.year,jdbcType=INTEGER},
      </if>
      <if test="record.month != null">
        month = #{record.month,jdbcType=INTEGER},
      </if>
      <if test="record.stockName != null">
        stock_name = #{record.stockName,jdbcType=VARCHAR},
      </if>
      <if test="record.open != null">
        open = #{record.open,jdbcType=REAL},
      </if>
      <if test="record.high != null">
        high = #{record.high,jdbcType=REAL},
      </if>
      <if test="record.hignTime != null">
        hign_time = #{record.hignTime,jdbcType=INTEGER},
      </if>
      <if test="record.low != null">
        low = #{record.low,jdbcType=REAL},
      </if>
      <if test="record.lowTime != null">
        low_time = #{record.lowTime,jdbcType=INTEGER},
      </if>
      <if test="record.close != null">
        close = #{record.close,jdbcType=REAL},
      </if>
      <if test="record.yestClose != null">
        yest_close = #{record.yestClose,jdbcType=REAL},
      </if>
      <if test="record.differences != null">
        differences = #{record.differences,jdbcType=REAL},
      </if>
      <if test="record.volume != null">
        volume = #{record.volume,jdbcType=BIGINT},
      </if>
      <if test="record.buyTime != null">
        buy_time = #{record.buyTime,jdbcType=INTEGER},
      </if>
      <if test="record.sellTime != null">
        sell_time = #{record.sellTime,jdbcType=INTEGER},
      </if>
      <if test="record.buyMoney != null">
        buy_money = #{record.buyMoney,jdbcType=REAL},
      </if>
      <if test="record.buyMoneyRate != null">
        buy_money_rate = #{record.buyMoneyRate,jdbcType=REAL},
      </if>
      <if test="record.failTime != null">
        fail_time = #{record.failTime,jdbcType=INTEGER},
      </if>
      <if test="record.failEndTime != null">
        fail_end_time = #{record.failEndTime,jdbcType=INTEGER},
      </if>
      <if test="record.failMoney != null">
        fail_money = #{record.failMoney,jdbcType=REAL},
      </if>
      <if test="record.failMoneyRate != null">
        fail_money_rate = #{record.failMoneyRate,jdbcType=REAL},
      </if>
      <if test="record.netProfit != null">
        net_profit = #{record.netProfit,jdbcType=REAL},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateSql != null" >
        ${record.updateSql},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update stock_info_month
    set stock_code = #{record.stockCode,jdbcType=VARCHAR},
      stock_type = #{record.stockType,jdbcType=INTEGER},
      year = #{record.year,jdbcType=INTEGER},
      month = #{record.month,jdbcType=INTEGER},
      stock_name = #{record.stockName,jdbcType=VARCHAR},
      open = #{record.open,jdbcType=REAL},
      high = #{record.high,jdbcType=REAL},
      hign_time = #{record.hignTime,jdbcType=INTEGER},
      low = #{record.low,jdbcType=REAL},
      low_time = #{record.lowTime,jdbcType=INTEGER},
      close = #{record.close,jdbcType=REAL},
      yest_close = #{record.yestClose,jdbcType=REAL},
      differences = #{record.differences,jdbcType=REAL},
      volume = #{record.volume,jdbcType=BIGINT},
      buy_time = #{record.buyTime,jdbcType=INTEGER},
      sell_time = #{record.sellTime,jdbcType=INTEGER},
      buy_money = #{record.buyMoney,jdbcType=REAL},
      buy_money_rate = #{record.buyMoneyRate,jdbcType=REAL},
      fail_time = #{record.failTime,jdbcType=INTEGER},
      fail_end_time = #{record.failEndTime,jdbcType=INTEGER},
      fail_money = #{record.failMoney,jdbcType=REAL},
      fail_money_rate = #{record.failMoneyRate,jdbcType=REAL},
      net_profit = #{record.netProfit,jdbcType=REAL},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wdke.stock.storage.entity.StockInfoMonth">
    update stock_info_month
    <set>
      <if test="stockName != null">
        stock_name = #{stockName,jdbcType=VARCHAR},
      </if>
      <if test="open != null">
        open = #{open,jdbcType=REAL},
      </if>
      <if test="high != null">
        high = #{high,jdbcType=REAL},
      </if>
      <if test="hignTime != null">
        hign_time = #{hignTime,jdbcType=INTEGER},
      </if>
      <if test="low != null">
        low = #{low,jdbcType=REAL},
      </if>
      <if test="lowTime != null">
        low_time = #{lowTime,jdbcType=INTEGER},
      </if>
      <if test="close != null">
        close = #{close,jdbcType=REAL},
      </if>
      <if test="yestClose != null">
        yest_close = #{yestClose,jdbcType=REAL},
      </if>
      <if test="differences != null">
        differences = #{differences,jdbcType=REAL},
      </if>
      <if test="volume != null">
        volume = #{volume,jdbcType=BIGINT},
      </if>
      <if test="buyTime != null">
        buy_time = #{buyTime,jdbcType=INTEGER},
      </if>
      <if test="sellTime != null">
        sell_time = #{sellTime,jdbcType=INTEGER},
      </if>
      <if test="buyMoney != null">
        buy_money = #{buyMoney,jdbcType=REAL},
      </if>
      <if test="buyMoneyRate != null">
        buy_money_rate = #{buyMoneyRate,jdbcType=REAL},
      </if>
      <if test="failTime != null">
        fail_time = #{failTime,jdbcType=INTEGER},
      </if>
      <if test="failEndTime != null">
        fail_end_time = #{failEndTime,jdbcType=INTEGER},
      </if>
      <if test="failMoney != null">
        fail_money = #{failMoney,jdbcType=REAL},
      </if>
      <if test="failMoneyRate != null">
        fail_money_rate = #{failMoneyRate,jdbcType=REAL},
      </if>
      <if test="netProfit != null">
        net_profit = #{netProfit,jdbcType=REAL},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_type = #{stockType,jdbcType=INTEGER}
      and year = #{year,jdbcType=INTEGER}
      and month = #{month,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wdke.stock.storage.entity.StockInfoMonth">
    update stock_info_month
    set stock_name = #{stockName,jdbcType=VARCHAR},
      open = #{open,jdbcType=REAL},
      high = #{high,jdbcType=REAL},
      hign_time = #{hignTime,jdbcType=INTEGER},
      low = #{low,jdbcType=REAL},
      low_time = #{lowTime,jdbcType=INTEGER},
      close = #{close,jdbcType=REAL},
      yest_close = #{yestClose,jdbcType=REAL},
      differences = #{differences,jdbcType=REAL},
      volume = #{volume,jdbcType=BIGINT},
      buy_time = #{buyTime,jdbcType=INTEGER},
      sell_time = #{sellTime,jdbcType=INTEGER},
      buy_money = #{buyMoney,jdbcType=REAL},
      buy_money_rate = #{buyMoneyRate,jdbcType=REAL},
      fail_time = #{failTime,jdbcType=INTEGER},
      fail_end_time = #{failEndTime,jdbcType=INTEGER},
      fail_money = #{failMoney,jdbcType=REAL},
      fail_money_rate = #{failMoneyRate,jdbcType=REAL},
      net_profit = #{netProfit,jdbcType=REAL},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_type = #{stockType,jdbcType=INTEGER}
      and year = #{year,jdbcType=INTEGER}
      and month = #{month,jdbcType=INTEGER}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.wdke.stock.storage.entity.StockInfoMonthExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stock_info_month
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="sumByExample" parameterType="com.wdke.stock.storage.entity.StockInfoMonthExample" resultType="long" >
    select sum(${sumCol}) from stock_info_month
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <insert id="batchInsert">
    <if test="items.get(0) != null">
            insert into stock_info_month  (stock_code, stock_type, year, 
        month, stock_name, open, 
        high, hign_time, low, low_time, 
        close, yest_close, differences, 
        volume, buy_time, sell_time, 
        buy_money, buy_money_rate, fail_time, 
        fail_end_time, fail_money, fail_money_rate, 
        net_profit, create_date, update_date
        )
      values
      <foreach collection="items" item="item" index="index" separator=",">
      (#{item.stockCode,jdbcType=VARCHAR}, #{item.stockType,jdbcType=INTEGER}, #{item.year,jdbcType=INTEGER}, 
        #{item.month,jdbcType=INTEGER}, #{item.stockName,jdbcType=VARCHAR}, #{item.open,jdbcType=REAL}, 
        #{item.high,jdbcType=REAL}, #{item.hignTime,jdbcType=INTEGER}, #{item.low,jdbcType=REAL}, #{item.lowTime,jdbcType=INTEGER}, 
        #{item.close,jdbcType=REAL}, #{item.yestClose,jdbcType=REAL}, #{item.differences,jdbcType=REAL}, 
        #{item.volume,jdbcType=BIGINT}, #{item.buyTime,jdbcType=INTEGER}, #{item.sellTime,jdbcType=INTEGER}, 
        #{item.buyMoney,jdbcType=REAL}, #{item.buyMoneyRate,jdbcType=REAL}, #{item.failTime,jdbcType=INTEGER}, 
        #{item.failEndTime,jdbcType=INTEGER}, #{item.failMoney,jdbcType=REAL}, #{item.failMoneyRate,jdbcType=REAL}, 
        #{item.netProfit,jdbcType=REAL}, #{item.createDate,jdbcType=TIMESTAMP}, #{item.updateDate,jdbcType=TIMESTAMP}
        )
      </foreach>
    </if>
  </insert>
</mapper>